package gladiusOrder

import (
	"github.com/RubiconDeFi/gladius-go-sdk/constants"
	"strings"
	"testing"
)

const ENC_ORDER = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000065d4324d0000000000000000000000000000000000000000000000000000000065d43286000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000098169248bdf25e0e297ea478ab46ac24058fac7800000000000000000000000000b20eed81122763a393f11765d821ea0b8d4d5a000000000000000000000000000000000000000000000000000000000000018c0000000000000000000000000000000000000000000000000000000065d43287000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000079781188f937ba0000000000000000000000000000000000000000000000000077868809da9b3200000000000000000000000000b20eed81122763a393f11765d821ea0b8d4d5a"

/*
   1. 0000000000000000000000000000000000000000000000000000000000000020 //
   2. 0000000000000000000000000000000000000000000000000000000000000140
   3. 0000000000000000000000000000000000000000000000000000000065d4324d // decayStartTime
   4. 0000000000000000000000000000000000000000000000000000000065d43286 // decayEndTime
   5. 0000000000000000000000000000000000000000000000000000000000000000 // exclusiveFiller
   6. 0000000000000000000000000000000000000000000000000000000000000000 // overrideBPS
   7. 0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607 // input.token
   8. 0000000000000000000000000000000000000000000000000000000005f5e100 // input.sa
   9. 0000000000000000000000000000000000000000000000000000000005f5e100 // input.ea
  10. 0000000000000000000000000000000000000000000000000000000000000220 // *output
  11. 0000000000000000000000000000000000000000000000000000000005f5e100 // fillThreshold

  12. 00000000000000000000000098169248bdf25e0e297ea478ab46ac24058fac78 // reactor
  13. 00000000000000000000000000b20eed81122763a393f11765d821ea0b8d4d5a // swapper
  14. 000000000000000000000000000000000000000000000000000000000000018c // nonce
  15. 0000000000000000000000000000000000000000000000000000000065d43287 // deadline
  16. 0000000000000000000000000000000000000000000000000000000000000000 // avc
  17. 00000000000000000000000000000000000000000000000000000000000000c0 // *avd
  18. 0000000000000000000000000000000000000000000000000000000000000000 // avd

  19. 0000000000000000000000000000000000000000000000000000000000000001 // size(output)
  20. 0000000000000000000000004200000000000000000000000000000000000006 // output.token
  21. 0000000000000000000000000000000000000000000000000079781188f937ba //
  22. 0000000000000000000000000000000000000000000000000077868809da9b32
  23. 00000000000000000000000000b20eed81122763a393f11765d821ea0b8d4d5a
*/

var (
	reactor         = strings.ToLower(constants.REACTOR_ADDRESS_MAPPING[10][constants.Dutch])
	swapper         = strings.ToLower("0x00b20eed81122763a393f11765d821ea0b8d4d5a")
	nonce    uint64 = 396
	deadline uint64 = 1708405383
	avc             = constants.ZERO_ADDRESS

	decayStart uint64 = 1708405325
	decayEnd   uint64 = 1708405382

	threshold = "100000000"
)

func TestParseOrderInfo(t *testing.T) {
	r := ParseReactor(ENC_ORDER)

	if strings.ToLower(r.Hex()) != reactor {
		t.Errorf("Invalid reactor\nhave: [%v] \nwant: [%v]", r, reactor)
	}

	s := ParseSwapper(ENC_ORDER)

	if strings.ToLower(s.Hex()) != swapper {
		t.Errorf("Invalid swapper\nhave: [%v] \nwant: [%v]", s, swapper)
	}

	n := ParseNonce(ENC_ORDER)
	if n.Uint64() != nonce {
		t.Errorf("Invalid nonce\nhave: [%v] \nwant: [%v]", n, nonce)
	}

	d := ParseDeadline(ENC_ORDER)
	if d.Uint64() != deadline {
		t.Errorf("Invalid deadline\nhave: [%v] \nwant: [%v]", d, deadline)
	}

	a := ParseAdditionalValidationContract(ENC_ORDER)
	if a != avc {
		t.Errorf("Invalid avc\nhave: [%v] \nwant: [%v]", a, avc)
	}

	ad := ParseAdditionalValidationData(ENC_ORDER)
	if ad == nil {
		t.Errorf("Invalid avd\nhave: [%v] \nwant: [%v]", ad, []byte{})
	}
}

func TestParseDecay(t *testing.T) {
	ds := ParseDecayStartTime(ENC_ORDER)
	if ds.Uint64() != decayStart {
		t.Errorf("Invalid ds\nhave: [%v] \nwant: [%v]", ds, decayStart)
	}

	de := ParseDecayEndTime(ENC_ORDER)
	if de.Uint64() != decayEnd {
		t.Errorf("Invalid ds\nhave: [%v] \nwant: [%v]", de, decayEnd)
	}
}

func TestParseFillThreshold(t *testing.T) {
	ft := ParseFillThreshold(ENC_ORDER)
	if ft.String() != threshold {
		t.Errorf("Invalid threshold\nhave: [%v] \nwant: [%v]", ft, threshold)
	}

	de := ParseDecayEndTime(ENC_ORDER)
	if de.Uint64() != decayEnd {
		t.Errorf("Invalid ds\nhave: [%v] \nwant: [%v]", de, decayEnd)
	}
}

func BenchmarkOrderInfo(b *testing.B) {
	for i := 0; i < b.N; i++ {
		ParseReactor(ENC_ORDER)
		ParseSwapper(ENC_ORDER)
		ParseNonce(ENC_ORDER)
		ParseDeadline(ENC_ORDER)
		ParseAdditionalValidationContract(ENC_ORDER)
		ParseAdditionalValidationData(ENC_ORDER)
	}
}
